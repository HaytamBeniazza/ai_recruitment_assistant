version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: recruitai_postgres
    restart: always
    environment:
      POSTGRES_DB: recruitai_db
      POSTGRES_USER: recruiter
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - recruitai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U recruiter -d recruitai_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Message Broker
  redis:
    image: redis:7-alpine
    container_name: recruitai_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - recruitai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes

  # pgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: recruitai_pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@recruitai.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - recruitai_network
    depends_on:
      - postgres

  # Redis Commander (Optional - for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: recruitai_redis_commander
    restart: always
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - recruitai_network
    depends_on:
      - redis

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  recruitai_network:
    driver: bridge 